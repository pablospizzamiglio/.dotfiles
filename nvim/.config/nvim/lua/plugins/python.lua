return {}

-- return {
--   {
--     "nvim-treesitter/nvim-treesitter",
--     opts = function(_, opts)
--       vim.list_extend(opts.ensure_installed or {}, {
--         "ninja",
--         "python",
--         "rst",
--         "toml",
--       })
--     end,
--   },
--   {
--     "williamboman/mason.nvim",
--     opts = function(_, opts)
--       vim.list_extend(opts.ensure_installed or {}, {
--         "black",
--         "isort",
--         "mypy",
--         "flake8",
--         "pyright",
--       })
--     end,
--   },
--   {
--     "neovim/nvim-lspconfig",
--     opts = {
--       servers = {
--         pyright = {
--           capabilities = {
--             -- Ignore pyright diagnostics to prevent duplication
--             -- https://github.com/neovim/nvim-lspconfig/issues/726#issuecomment-1700845901
--             textDocument = {
--               publishDiagnostics = {
--                 tagSupport = {
--                   valueSet = { 2 },
--                 },
--               },
--             },
--           },
--           settings = {
--             python = {
--               analysis = {
--                 -- diagnosticMode = "off",
--                 typeCheckingMode = "off",
--                 useLibraryCodeForTypes = false,
--               },
--             },
--           },
--         },
--       },
--     },
--   },
--   {
--     "stevearc/conform.nvim",
--     opts = {
--       formatters_by_ft = {
--         python = { "isort", "black" },
--       },
--     },
--   },
--   {
--     "mfussenegger/nvim-lint",
--     ft = { "python" },
--     opts = function(_, opts)
--       local linters_by_ft = {
--         python = { "flake8", "mypy" },
--       }
--
--       -- extend opts.linters_by_ft
--       for ft, linters_ in pairs(linters_by_ft) do
--         opts.linters_by_ft[ft] = opts.linters_by_ft[ft] or {}
--         vim.list_extend(opts.linters_by_ft[ft], linters_)
--       end
--     end,
--   },
--   {
--     "nvim-neotest/neotest",
--     dependencies = {
--       "nvim-neotest/neotest-python",
--     },
--     opts = {
--       adapters = {
--         ["neotest-python"] = {
--           -- Here you can specify the settings for the adapter, i.e.
--           -- runner = "pytest",
--           -- python = ".venv/bin/python",
--         },
--       },
--     },
--   },
--   {
--     "mfussenegger/nvim-dap",
--     dependencies = {
--       "mfussenegger/nvim-dap-python",
--       -- stylua: ignore
--       keys = {
--         { "<leader>dPt", function() require('dap-python').test_method() end, desc = "Debug Method", ft = "python" },
--         { "<leader>dPc", function() require('dap-python').test_class() end,  desc = "Debug Class",  ft = "python" },
--       },
--       config = function()
--         local path = require("mason-registry").get_package("debugpy"):get_install_path()
--         require("dap-python").setup(path .. "/venv/bin/python")
--       end,
--     },
--   },
--   {
--     "linux-cultist/venv-selector.nvim",
--     cmd = "VenvSelect",
--     opts = function(_, opts)
--       if require("lazyvim.util").has("nvim-dap-python") then
--         opts.dap_enabled = true
--       end
--       return vim.tbl_deep_extend("force", opts, {
--         name = {
--           "venv",
--           ".venv",
--           "env",
--           ".env",
--         },
--       })
--     end,
--     keys = { { "<leader>cv", "<cmd>:VenvSelect<cr>", desc = "Select VirtualEnv" } },
--   },
-- }
